import asyncio
import logging
from fastapi import HTTPException
from app.api.models.vuln_assessment import WebVulnerabilityAssessmentModel, NetworkVulnerabilityAssessmentModel
from app.api.models.vuln_exploiting import NetworkVulnerabilityExploitingModel
from app.api.exploiting.network.vsftpd_exploit import exploit_vsftpd_and_get_credentials

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Exploiting:
    def __init__(self):
        pass


    @staticmethod
    async def get_network_data(ip_address: str):
        network_data = await NetworkVulnerabilityAssessmentModel.find_one(NetworkVulnerabilityAssessmentModel.target == ip_address)
        return network_data

    async def network_vulnerability_exploiting(self, ip_address: str):
        network_data = await self.get_network_data(ip_address)

        if network_data is None:
            raise HTTPException(status_code=404, detail="Network data not found")

        target = network_data.target

        detected_services = network_data.detected_services_data or []
        vsftpd_exploiting_data = []

        for item in detected_services:
            target = item.get("target")
            service = item.get("service", "").lower()

            logger.info(f"Checking service on: {target} | Detected service: {service}")

            if "ftp vsftpd 2.3.4" in service:
                logger.warning(f"Found vulnerable vsftpd 2.3.4 on {target}, attempting exploitation...")
                result = await exploit_vsftpd_and_get_credentials(target)
                if result:
                   logger.info(f"Exploitation successful on {target}")
                   vsftpd_exploiting_data.append(result)
                else:
                   logger.error(f"Exploitation failed on {target}")
            else:
               logger.info(f"vsftpd 2.3.4 not found on {target}")




        network_vuln_exploiting = NetworkVulnerabilityExploitingModel(
            target=ip_address,
            vsftpd_exploiting_data=vsftpd_exploiting_data
    )
        await network_vuln_exploiting.save()

        


       




        

