import logging
import asyncio
import httpx
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

REDIRECT_PAYLOAD = "https://example.com"

async def check_true_redirect(client, test_url, origin_host):
    headers = {
        "Origin": f"http://{origin_host}",
        "Host": origin_host
    }
    try:
        response = await client.get(test_url, headers=headers, follow_redirects=True, timeout=10)
        final_url = str(response.url)
        final_host = urlparse(final_url).netloc

        # Check if we landed on an untrusted domain
        if REDIRECT_PAYLOAD in final_url or final_host != origin_host:
            return True, final_url
    except httpx.RequestError as e:
        logger.warning(f"[!] Request error: {e}")
    return False, None

async def test_open_redirect(client, url):
    logger.info(f"\n[+]========= Scanning URL for Open Redirect: {url}")
    parsed_url = urlparse(url)
    original_params = {k: v[0] for k, v in parse_qs(parsed_url.query).items()}

    if not original_params:
        logger.warning("[-] No query parameters found to test.")
        return []

    origin_host = parsed_url.netloc
    results = []

    for param in original_params:
        test_params = original_params.copy()
        test_params[param] = REDIRECT_PAYLOAD
        test_query = urlencode(test_params)
        test_url = urlunparse(parsed_url._replace(query=test_query))

        logger.info(f"[~] Testing parameter: '{param}' with URL: {test_url}")
        success, final_url = await check_true_redirect(client, test_url, origin_host)

        if success:
            logger.info("[+] Open Redirect Detected!")
            logger.info(f"    Parameter     : {param}")
            logger.info(f"    Tested URL    : {test_url}")
            logger.info(f"    Final URL     : {final_url}")
            results.append({
                "parameter": param,
                "tested_url": test_url,
                "redirected_to": final_url,
                "original_url": url
            })

    if not results:
        logger.info("[-] No open redirect vulnerability detected.")
    return results

async def main():
    target_urls = [
        "http://testphp.vulnweb.com/redir.php?r=http://ezproxy.cityu.edu.hk/login?url=https://mangga69login.xyz",
        "http://www.estarta.com/index.php?rest_route=%2Foembed%2F1.0%2Fembed&url=http%3A%2F%2Fwww.estarta.com%2F&format=xml"
    ]
    async with httpx.AsyncClient() as client:
        for target_url in target_urls:
            await test_open_redirect(client, target_url)

if __name__ == "__main__":
    asyncio.run(main())
