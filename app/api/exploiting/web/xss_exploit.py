import asyncio
import logging
import httpx
import re
from urllib.parse import urlencode, urlparse, urlunparse, parse_qs
from bs4 import BeautifulSoup

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)


def load_payloads(filename="xss_payload.txt"):
    with open(filename, "r") as f:
        return [line.strip() for line in f if line.strip()]


def payload_reflected(payload: str, html: str) -> bool:
    if payload in html:
        return True

    # Search in scripts and inline event handlers
    if re.search(r'<script[^>]*>[^<]*' + re.escape(payload) + r'[^<]*</script>', html, re.IGNORECASE):
        return True
    if re.search(r'on\w+="[^"]*' + re.escape(payload) + r'[^"]*"', html, re.IGNORECASE):
        return True

    soup = BeautifulSoup(html, "html.parser")

    if payload in soup.get_text():
        return True

    for script in soup.find_all("script"):
        if script.string and payload in script.string:
            return True

    for tag in soup.find_all(True):
        for attr, value in tag.attrs.items():
            if isinstance(value, list):
                value = " ".join(value)
            if value and payload in value:
                return True

    return False


async def test_url_xss(url: str, original_params: dict, payloads: list, parsed_url, results: list) -> bool:
    headers = {
        "User-Agent": "Mozilla/5.0 (XSS-Scanner)",
        "X-Forwarded-For": "127.0.0.1",
        "Referer": url
    }

    async with httpx.AsyncClient(follow_redirects=True, headers=headers, timeout=10) as client:
        for param in original_params:
            for payload in payloads:
                test_params = original_params.copy()
                test_params[param] = original_params[param] + payload
                query_str = urlencode(test_params)
                injected_url = urlunparse(parsed_url._replace(query=query_str))

                try:
                    resp = await client.get(injected_url)
                    html = resp.text

                    if "access denied" in html.lower() or "xss detected" in html.lower():
                        continue

                    if payload_reflected(payload, html):
                        logger.info(f"\n[+] Vulnerable URL found:")
                        logger.info(f"🔓 Clean URL  : {url}")
                        logger.info(f"💉 Injected   : {injected_url}")
                        logger.info(f"🧪 Parameter  : {param}")
                        logger.info(f"📦 Payload    : {payload}")
                        logger.info(f"🧭 Type       : URL")
                        logger.info(f"⚠️ Attack Type: reflected xss")
                        results.append({
                            "type": "url",
                            "param": param,
                            "payload": payload,
                            "url_clean": url,
                            "url_injected": injected_url,
                            "attack_type": "reflected xss"
                        })
                        return True  # Stop testing more payloads for this URL
                except Exception as e:
                    logger.warning(f"[!] Failed to request: {injected_url} | {e}")
    return False


async def test_form_xss(url: str, payloads: list, results: list) -> bool:
    headers = {
        "User-Agent": "Mozilla/5.0 (XSS-Scanner)",
        "X-Forwarded-For": "127.0.0.1",
        "Referer": url
    }

    async with httpx.AsyncClient(follow_redirects=True, headers=headers, timeout=10) as client:
        try:
            resp = await client.get(url)
            soup = BeautifulSoup(resp.text, "html.parser")
            forms = soup.find_all("form")

            for form in forms:
                action = form.get("action") or url
                method = form.get("method", "get").lower()
                inputs = form.find_all(["input", "textarea", "select"])
                form_data = {inp.get("name"): "test" for inp in inputs if inp.get("name")}

                for param in form_data:
                    for payload in payloads:
                        data = form_data.copy()
                        data[param] = payload

                        if action.startswith("http"):
                            target_url = action
                        else:
                            target_url = url

                        try:
                            if method == "post":
                                res = await client.post(target_url, data=data)
                            else:
                                res = await client.get(target_url, params=data)

                            html = res.text
                            if "access denied" in html.lower() or "xss detected" in html.lower():
                                continue

                            if payload_reflected(payload, html):
                                full_url = f"{target_url}?{urlencode(data)}"
                                logger.info(f"\n[+] Vulnerable form found:")
                                logger.info(f"🔓 Clean URL  : {url}")
                                logger.info(f"💉 Injected   : {full_url}")
                                logger.info(f"🧪 Parameter  : {param}")
                                logger.info(f"📦 Payload    : {payload}")
                                logger.info(f"🧭 Type       : FORM")
                                logger.info(f"⚠️ Attack Type: reflected xss")
                                note = "⚠️ Note: When testing manually, enter the payload in the search field of the form."
                                logger.info(note)

                                results.append({
                                    "type": "form",
                                    "param": param,
                                    "payload": payload,
                                    "url_clean": url,
                                    "url_injected": full_url,
                                    "note": note,
                                    "attack_type": "reflected xss"
                                })
                                return True  # Stop testing more payloads/forms for this URL
                        except Exception as e:
                            logger.warning(f"[!] Form request failed: {e}")
        except Exception as e:
            logger.warning(f"[!] Initial GET failed: {e}")
    return False


async def scan_url(url, payloads):
    logger.info(f"🔍 Scanning URL: {url}")
    parsed_url = urlparse(url)
    original_params = {k: v[0] for k, v in parse_qs(parsed_url.query).items()}
    results = []

    # Try forms first; stop if any payload successful
    found = await test_form_xss(url, payloads, results)
    if found:
        return results

    # Then try URL parameters; stop if any payload successful
    if original_params:
        found = await test_url_xss(url, original_params, payloads, parsed_url, results)
        if found:
            return results

    return results


async def main(target_urls):
    payloads = load_payloads()
    all_results = []

    tasks = [scan_url(url, payloads) for url in target_urls]
    results = await asyncio.gather(*tasks)

    for group in results:
        all_results.extend(group)

    return all_results
