import asyncio
import logging
from urllib.parse import urlencode, urlparse, urlunparse, parse_qs

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import NoAlertPresentException, NoSuchElementException

# Configure logging
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

def get_driver():
    options = Options()
    options.add_argument("--headless")
    return webdriver.Chrome(options=options)

def load_payloads(filename="xss_payload.txt"):
    with open(filename, "r") as f:
        payloads = [line.strip() for line in f if line.strip()]
        logger.info(f"Loaded {len(payloads)} payloads from '{filename}'")
        return payloads

async def test_form_xss(driver, url, param_names, payloads, original_params, parsed_url, report_log):
    logger.info(f"Starting form-based XSS testing on {url}")
    for param in param_names:
        for payload in payloads:
            driver.get(url)
            await asyncio.sleep(1)
            inputs = driver.find_elements(By.TAG_NAME, "input")
            form_data = {}

            logger.info(f"[FORM] Testing param '{param}' with payload '{payload}'")
            report_log.append(f"[FORM] Testing Parameter: '{param}' with payload: {payload}")

            for inp in inputs:
                name = inp.get_attribute("name")
                input_type = inp.get_attribute("type")
                if not name or input_type in ["submit", "button", "hidden"]:
                    continue
                try:
                    field = driver.find_element(By.NAME, name)
                    field.clear()
                    if name == param:
                        field.send_keys(payload)
                        form_data[name] = payload
                    else:
                        field.send_keys("test")
                        form_data[name] = "test"
                except Exception as e:
                    msg = f"    [!] Couldn't fill input '{name}': {e}"
                    report_log.append(msg)
                    logger.warning(msg)

            try:
                submit = driver.find_element(By.NAME, "goButton")
                submit.click()
            except NoSuchElementException:
                msg = "    [!] Submit button not found."
                report_log.append(msg)
                logger.warning(msg)
                continue

            await asyncio.sleep(2)

            try:
                alert = Alert(driver)
                alert_text = alert.text
                alert.accept()

                full_query = {**original_params, **form_data}
                query_str = urlencode(full_query)
                injected_url = urlunparse(parsed_url._replace(query=query_str))

                report_log.append("[+] XSS via FORM detected!")
                report_log.append(f"    Parameter : {param}")
                report_log.append(f"    Payload   : {payload}")
                report_log.append(f"    URL       : {injected_url}")
                report_log.append(f"    Alert     : {alert_text}")
                logger.info(f"[+] XSS via FORM detected! Param: {param} | URL: {injected_url}")
                return True
            except NoAlertPresentException:
                continue
    return False

async def test_url_xss(driver, url, original_params, payloads, parsed_url, report_log):
    logger.info(f"Starting URL-based XSS testing on {url}")
    for param in original_params:
        for payload in payloads:
            test_params = original_params.copy()
            test_params[param] = payload
            query_str = urlencode(test_params)
            injected_url = urlunparse(parsed_url._replace(query=query_str))

            logger.info(f"[URL] Testing param '{param}' with payload '{payload}'")
            report_log.append(f"[URL] Testing Parameter: '{param}' with payload: {payload}")
            driver.get(injected_url)
            await asyncio.sleep(2)

            try:
                alert = Alert(driver)
                alert_text = alert.text
                alert.accept()

                report_log.append("[+] XSS via URL detected!")
                report_log.append(f"    Parameter : {param}")
                report_log.append(f"    Payload   : {payload}")
                report_log.append(f"    URL       : {injected_url}")
                report_log.append(f"    Alert     : {alert_text}")
                logger.info(f"[+] XSS via URL detected! Param: {param} | URL: {injected_url}")
                return True
            except NoAlertPresentException:
                continue
    return False

async def scan_url(url, payloads):
    logger.info(f"Scanning started for URL: {url}")
    report_log = [f"[+] Scanning URL: {url}"]
    driver = get_driver()
    try:
        parsed_url = urlparse(url)
        original_params = {k: v[0] for k, v in parse_qs(parsed_url.query).items()}
        driver.get(url)
        inputs = driver.find_elements(By.TAG_NAME, "input")
        param_names = [
            inp.get_attribute("name")
            for inp in inputs
            if inp.get_attribute("name") and inp.get_attribute("type") not in ["submit", "button", "hidden"]
        ]

        if param_names:
            await test_form_xss(driver, url, param_names, payloads, original_params, parsed_url, report_log)
        elif original_params:
            await test_url_xss(driver, url, original_params, payloads, parsed_url, report_log)
        else:
            msg = "[-] No parameters or forms to test."
            report_log.append(msg)
            logger.warning(msg)
    finally:
        driver.quit()
        logger.info(f"Finished scanning {url}")
    return report_log

async def main():
    target_urls = [
        "http://testphp.vulnweb.com/search.php?test=query",
        "http://testhtml5.vulnweb.com/report?id=1"
    ]
    payloads = load_payloads()
    all_results = {}
    for url in target_urls:
        logger.info(f"Processing target: {url}")
        result = await scan_url(url, payloads)
        all_results[url] = result
    return all_results

if __name__ == "__main__":
    logger.info("Starting XSS scanning tool...")
    results = asyncio.run(main())
    for url, logs in results.items():
        print(f"\n[+] Results for {url} :")
        for line in logs:
            print(line)
    logger.info("XSS scanning completed.")
