import asyncio
import logging
import sys
from typing import Optional

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to run the OpenVAS scan using gvm-cli
async def run_openvas_scan(ip_range: str, gmp_username: str, gmp_password: str, gmp_host: str = "127.0.0.1", gmp_port: int = 9390):
    try:
        logger.info(f"Starting OpenVAS scan for IP range: {ip_range}")

        command = f"""
        gvm-cli ssh --hostname {gmp_host} --gmp-username {gmp_username} --gmp-password {gmp_password} --port {gmp_port} --timeout 60 --xml "<create_target><name>ScanTarget</name><hosts>{ip_range}</hosts></create_target>"
        """

        # Run the command using asyncio
        process = await asyncio.create_subprocess_shell(
            command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await process.communicate()

        if process.returncode == 0:
            logger.info("Target created successfully.")
            logger.debug(f"Output:\n{stdout.decode()}")
        else:
            logger.error("Failed to run scan.")
            logger.error(stderr.decode())

    except Exception as e:
        logger.exception(f"Unexpected error: {e}")

# Main function to trigger scan
async def main():
    if len(sys.argv) != 4:
        logger.error("Usage: python scan.py <IP_RANGE> <USERNAME> <PASSWORD>")
        return

    ip_range = sys.argv[1]
    gmp_username = sys.argv[2]
    gmp_password = sys.argv[3]

    await run_openvas_scan(ip_range, gmp_username, gmp_password)

if __name__ == "__main__":
    asyncio.run(main())
