import logging
import asyncio
import httpx
import sys


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def assess_http_headers(security_headers: dict | None, observed_headers: dict | None, subdomain: str) -> list[dict]:
    results = []

    security_headers = security_headers or {}
    observed_headers = observed_headers or {}

    known_security_headers = {
        "X-Frame-Options": "Protects against clickjacking attacks.",
        "X-XSS-Protection": "Mitigates reflected XSS attacks.",
        "Content-Security-Policy": "Prevents a wide range of attacks including XSS and data injection.",
        "Strict-Transport-Security": "Enforces HTTPS to prevent MITM attacks.",
        "Referrer-Policy": "Controls how much referrer info is shared, helps reduce leakage.",
        "Permissions-Policy": "Restricts access to browser features (e.g. camera, geolocation).",
        "Cross-Origin-Resource-Policy": "Mitigates data leaks between origins.",
        "Cross-Origin-Embedder-Policy": "Secures embedded resources.",
        "Cross-Origin-Opener-Policy": "Helps isolate browsing context."
    }

    for header, risk_desc in known_security_headers.items():
        value = security_headers.get(header)
        if value:
            logger.info(f"{header} is enabled: {value}")
            results.append({
                "subdomain": subdomain,
                "header": header,
                "status": "enabled",
                "description": f"{header} is available and helps protect the app. ({risk_desc})"
            })
        else:
            logger.warning(f"{header} is missing!")
            results.append({
                "subdomain": subdomain,
                "header": header,
                "status": "missing",
                "description": f"{header} is missing, which makes the site more vulnerable. ({risk_desc})"
            })

    server_header = observed_headers.get("Server")
    if server_header:
        logger.info(f"Server header found: {server_header}")
        results.append({
            "subdomain": subdomain,
            "header": "Server",
            "status": "exposed",
            "description": f"Server header reveals backend technology: {server_header}. This may aid attackers in targeted exploitation."
        })
    else:
        results.append({
            "subdomain": subdomain,
            "header": "Server",
            "status": "hidden",
            "description": "Server header is not exposed. This helps obscure backend details from attackers."
        })

    set_cookie = observed_headers.get("Set-Cookie")
    if set_cookie is None:
        results.append({
            "subdomain": subdomain,
            "header": "Set-Cookie",
            "status": "missing",
            "description": "Set-Cookie header not observed. If cookies are used, missing security attributes (HttpOnly, Secure) can lead to attacks."
        })

    return results




