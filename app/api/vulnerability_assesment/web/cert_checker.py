from datetime import datetime, timezone
import logging
import sys


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_certificate(subdomain, has_tls, start_date, expire_date, issuer):
    result = {
        "subdomain": subdomain,
        "has_tls": has_tls,
        "issuer": issuer,
        "start_date": start_date,
        "expire_date": expire_date,
        "status": "unknown",
        "days_until_expire": None,
        "severity": None
    }
    
    logger.info(f"Checking certificate for {subdomain}")
    
    if not has_tls:
        result["status"] = "no_tls"
        result["severity"] = "high"
        logger.warning(f"TLS is not enabled for {subdomain}")
        return result
    
    try:
        now = datetime.now(timezone.utc)
        
        # Handle both string and datetime inputs
        if isinstance(start_date, str):
            start = datetime.fromisoformat(start_date)
        elif isinstance(start_date, datetime):
            start = start_date.replace(tzinfo=timezone.utc) if start_date.tzinfo is None else start_date
        else:
            raise ValueError(f"Invalid start_date type: {type(start_date)}")
            
        if isinstance(expire_date, str):
            expiry = datetime.fromisoformat(expire_date)
        elif isinstance(expire_date, datetime):
            expiry = expire_date.replace(tzinfo=timezone.utc) if expire_date.tzinfo is None else expire_date
        else:
            raise ValueError(f"Invalid expire_date type: {type(expire_date)}")
        
        days_left = (expiry - now).days
        result["days_until_expire"] = days_left
        
        # Convert datetime objects to strings for the result (for JSON serialization)
        result["start_date"] = start.isoformat()
        result["expire_date"] = expiry.isoformat()
        
        if now < start:
            result["status"] = "not_yet_valid"
            result["severity"] = "medium"
            logger.warning(f"Certificate for {subdomain} is not yet valid.")
        elif now > expiry:
            result["status"] = "expired"
            result["severity"] = "high"
            logger.error(f"Certificate for {subdomain} has expired.")
        else:
            result["status"] = "valid"
            result["severity"] = "medium" if days_left <= 15 else "low"
            logger.info(f"Certificate for {subdomain} is valid. Days until expiry: {days_left}")
            
    except Exception as e:
        logger.exception(f"Error while checking certificate for {subdomain}: {e}")
        
    return result