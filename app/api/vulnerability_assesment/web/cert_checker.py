import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def parse_cert_date(date_str: str) -> datetime:
    try:
        return datetime.strptime(date_str, "%b %d %H:%M:%S %Y %Z")
    except ValueError as e:
        logger.error(f"Date parsing failed for: {date_str} | Error: {e}")
        raise


def assess_certificate_vulnerabilities(certificate_details: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    now = datetime.now(timezone.utc)
    results = []

    for cert in certificate_details:
        domain = cert.get("subdomains", ["unknown"])[0]
        has_tls = cert.get("has_tls", False)
        start_date_str = cert.get("start_date")
        expire_date_str = cert.get("expire_date")
        issuer = cert.get("issuer", {})

        cert_data = {
            "domain": domain,
            "has_tls": has_tls,
            "start_date": start_date_str,
            "expire_date": expire_date_str,
            "is_expired": None,
            "expires_soon": None,
            "days_until_expiration": None,
            "issuer_name": None
        }

        logger.info(f"Assessing certificate for domain: {domain}")

        # TLS validity
        if has_tls and expire_date_str:
            try:
                expire_date = parse_cert_date(expire_date_str)
                days_left = (expire_date - now).days
                cert_data["days_until_expiration"] = days_left
                cert_data["is_expired"] = days_left < 0
                cert_data["expires_soon"] = 0 <= days_left <= 30

                logger.info(f"Domain: {domain} | Days left: {days_left} | Expired: {cert_data['is_expired']} | Expires soon: {cert_data['expires_soon']}")
            except Exception as e:
                logger.warning(f"Failed to parse expiration date for domain {domain}: {e}")

        # Issuer name
        if isinstance(issuer, dict):
            cert_data["issuer_name"] = issuer.get("organizationName")

        results.append(cert_data)

    logger.info("Certificate vulnerability assessment completed.")
    return results
