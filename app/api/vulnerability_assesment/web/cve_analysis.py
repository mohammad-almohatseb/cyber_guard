# From tech_info/server_info  --> services / server / os  .....

import logging
import asyncio
import httpx

# Configure logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

async def normalize_input(raw_input: str) -> str:
    return " ".join(raw_input.strip().replace("/", " ").lower().split())

async def fetch_cves(session: httpx.AsyncClient, keyword: str) -> list[dict]:
    """Async fetch from NVD API."""
    params = {
        "keywordSearch": keyword,
        "resultsPerPage": 5,
        "startIndex": 0
    }
    try:
        response = await session.get(NVD_API_URL, params=params, timeout=10)
        if response.status_code != 200:
            logger.error(f"Failed to fetch CVEs for '{keyword}', status code: {response.status_code}")
            return []
        return response.json().get("vulnerabilities", [])
    except Exception as e:
        logger.error(f"Error while contacting NVD for '{keyword}': {e}")
        return []

async def search_cves_async(tech_string: str) -> list[dict]:
    """Normalize input, try exact + fallback CVE search asynchronously."""
    if tech_string.strip().lower() == "unknown":
        logger.info("‚è≠Ô∏è Input is 'Unknown'. Skipping...")
        return []

    normalized = await normalize_input(tech_string)
    logger.info(f"üîç Searching NVD for: {normalized}")

    async with httpx.AsyncClient() as session:
        cves = await fetch_cves(session, normalized)

        if not cves and " " in normalized:
            fallback = normalized.split(" ")[0]
            logger.warning(f"No exact match. Trying broader search for: {fallback}")
            cves = await fetch_cves(session, fallback)

        if not cves:
            logger.info("‚ùå No CVEs found.")
        else:
            for cve in cves:
                cve_id = cve.get("cve", {}).get("id", "N/A")
                desc = cve.get("cve", {}).get("descriptions", [{}])[0].get("value", "No description.")
                logger.info(f"- {cve_id}: {desc[:300]}...")

        return cves
