import logging
import asyncio
import sys
from urllib.parse import urlparse
from typing import Optional


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_urls_for_common_paths(urls: list[str], subdomain: str) -> Optional[dict]:
    """Return a single dictionary with URL and reason if it matches a sensitive path."""
    if not isinstance(urls, list):
        logger.error("Expected a list of URLs.")
        return None

    for url in urls:
        if not isinstance(url, str) or not url.strip():
            logger.error(f"Invalid or missing URL: {url}")
            continue

        try:
            parsed = urlparse(url)
            path = parsed.path.lower().strip("/")
        except Exception as e:
            logger.error(f"Failed to parse URL: {url} — {e}")
            continue

        for common_path in COMMON_PATHS:
            common_path_stripped = common_path.strip("/")
            if path.startswith(common_path_stripped):
                reason_key = common_path_stripped.split("/")[0]  # extract base keyword
                reason = VULN_REASONS.get(reason_key, "No specific reason provided.")
                logger.warning(f"Sensitive path found: {common_path} in {url} — {reason}")
                return {
                    "subdomain": subdomain,
                    "url": url,
                    "path": common_path,
                    "description": reason
                }

    logger.info(f"No known sensitive paths detected in provided URLs for subdomain: {subdomain}")
    return None




# Common sensitive paths
COMMON_PATHS = [
    "/robots.txt", "/humans.txt", "/sitemap.xml", "/crossdomain.xml",
    "/login", "/signin", "/signup", "/logout", "/register",
    "/admin", "/admin/login", "/admincp", "/admin-panel", "/administrator", "/adminconsole",
    "/adminarea", "/admin_login", "/adminsignin", "/signin-admin", "/admin-user", "/admin-users",
    "/user", "/users", "/useradmin", "/account", "/accounts", "/auth", "/authenticate",
    "/dashboard", "/cp", "/controlpanel", "/control", "/backend", "/manage", "/settingsadmin",
    "/settings", "/config", "/configuration", "/webadmin", "/cms", "/panel", "/superadmin", "/mod", "/moderator",
    "/wp-admin", "/wp-login", "/wp-content", "/wp-includes",
    "/upload", "/uploads", "/download", "/downloads", "/files", "/filemanager", "/ftp",
    "/db", "/database", "/phpmyadmin", "/adminer", "/websql",
    "/debug", "/debugbar", "/test", "/tests", "/staging", "/qa", "/dev", "/development", "/build",
    "/logs", "/log", "/error", "/errors", "/trace", "/traceroute", "/status", "/health", "/metrics",
    "/api", "/api/v1", "/api/v2", "/graphql", "/rest", "/swagger", "/openapi",
    "/src", "/source", "/includes", "/include", "/vendor", "/composer.lock", "/package.json",
    "/temp", "/tmp", "/backup", "/backups", "/bak", "/old", "/archive", "/restore", "/.old", "/.bak",
    "/setup", "/install", "/installation", "/setup.php", "/install.php",
    "/webconfig", "/web.config", "/config.json", "/config.php", "/conf", "/.env", "/.git", "/.svn",
    "/private", "/secret", "/hidden", "/internal", "/intranet", "/secure",
    "/staff", "/support", "/help", "/contact", "/faq", "/tickets",
    "/session", "/sessions", "/token", "/csrf", "/auth-token",
    "/admin_console", "/admininterface", "/admin/dashboard", "/admin/home",
    "/monitor", "/monitoring", "/analytics", "/reports", "/report", "/doc", "/docs", "/documentation"
    
]

# Vulnerability reasons
VULN_REASONS = {
    "sitemap.xml": "Can reveal hidden endpoints or admin panels not linked publicly.",
    ".bak": "Backup or temporary file which may contain sensitive historical configurations.",
    ".env": "Environment files usually store secrets like tokens, keys, and DB passwords.",
    ".git": "Publicly accessible Git repositories expose full source code and commit history.",
    ".old": "Old system files may still be accessible and contain exploitable vulnerabilities.",
    "account": "Account pages may leak user data or allow manipulation without proper controls.",
    "admin": "Admin panels can expose critical controls if not protected by authentication and IP restrictions.",
    "admin_login": "Alternate admin login path — often less monitored than the primary login.",
    "admin-console": "May contain full access to system or app settings; must be protected.",
    "adminarea": "Custom admin panel often lacking standard security practices.",
    "admincp": "Legacy admin control panel — often uses outdated and unpatched software.",
    "adminconsole": "Administrative consoles must be access controlled to prevent unauthorized access.",
    "admininterface": "Alternative admin interface, sometimes undocumented and less secure.",
    "analytics": "Analytics dashboards may reveal user behavior and sensitive usage data.",
    "api": "Public APIs can leak sensitive data or allow privilege escalation if not secured.",
    "auth": "Authentication endpoints must be hardened to resist brute-force and injection.",
    "backup": "Backup folders may contain outdated but exploitable source code or data.",
    "cms": "Content Management Systems often have vulnerabilities if not updated regularly.",
    "composer.lock": "Can reveal PHP package versions and dependencies for targeted exploits.",
    "config": "Configuration files may include secrets such as DB credentials or API keys.",
    "conf": "May contain sensitive system-wide configuration information.",
    "contact": "Sometimes reveals internal emails or other sensitive contact data.",
    "control": "Control interfaces must be restricted due to access to system functions.",
    "controlpanel": "Control panels are sensitive administrative interfaces requiring hardening.",
    "cp": "Shorthand for control panel — often used in legacy admin interfaces.",
    "crossdomain.xml": "May reveal trust relationships across domains; can be abused for XSS.",
    "dashboard": "Dashboards may display user or system data not meant for public access.",
    "database": "Direct database access should never be exposed without strong protections.",
    "db": "Database endpoints should never be exposed without strict access control.",
    "debug": "Debug endpoints can expose application internals and stack traces.",
    "dev": "Development environments often contain vulnerabilities or test configurations.",
    "development": "Like 'dev', it may be an unprotected test environment.",
    "doc": "May contain internal documentation, often with implementation details.",
    "docs": "Documentation may unintentionally include sensitive implementation details.",
    "download": "Download paths can leak sensitive or private data if improperly configured.",
    "error": "Errors can leak stack traces, file paths, or other useful internal details.",
    "errors": "See 'error'.",
    "faq": "Frequently Asked Questions may disclose unnecessary internal process information.",
    "filemanager": "File manager interfaces can allow uploading or editing sensitive files.",
    "files": "Exposed files may contain sensitive or private data.",
    "ftp": "FTP endpoints are insecure and often misconfigured.",
    "graphql": "GraphQL endpoints may allow unrestricted queries and data enumeration.",
    "health": "Health endpoints can leak infrastructure status and version info.",
    "help": "Help pages sometimes reveal internal processes or assumptions.",
    "hidden": "Intended to be non-public — attackers specifically look for such endpoints.",
    "humans.txt": "May contain dev/team info useful for social engineering or phishing.",
    "includes": "Included files may be accessible and reveal app structure or sensitive code.",
    "include": "See 'includes'.",
    "install": "Installer scripts may allow reinstallation, overwriting configuration or DB.",
    "installation": "See 'install'.",
    "install.php": "Installer script, may allow reinstallation or configuration leaks.",
    "internal": "Endpoints labeled 'internal' should never be publicly accessible.",
    "intranet": "May link to private network services, exposing internal structure.",
    "log": "Exposed logs may include stack traces, usernames, tokens, or internal paths.",
    "logs": "See 'log'.",
    "login": "Login endpoints may be vulnerable to brute-force or credential stuffing attacks.",
    "logout": "Improper logout endpoints can be vulnerable to CSRF or session fixation.",
    "manage": "Management interface for controlling services or data — must be protected.",
    "metrics": "Metrics endpoints should be restricted to avoid leakage of system internals.",
    "mod": "Moderator panels should be secured — they often have elevated privileges.",
    "monitor": "Monitoring dashboards can reveal infrastructure metrics or internal status.",
    "monitoring": "See 'monitor'.",
    "old": "Deprecated versions of files may still be accessible and exploitable.",
    "openapi": "May expose full API documentation and internal endpoints.",
    "package.json": "Can expose JavaScript library versions for known CVEs.",
    "panel": "Generic control panel, may be custom and poorly secured.",
    "phpmyadmin": "Popular DB management tool often exposed and targeted if not secured.",
    "private": "Private or internal endpoints should never be exposed to the internet.",
    "qa": "Quality assurance environment — often left unsecured or outdated.",
    "register": "May allow account creation abuse or enumeration.",
    "report": "Reports may contain analytics, user data, or financial information.",
    "reports": "Reports may contain analytics, user data, or financial information.",
    "restore": "Restore endpoints may allow rollback to vulnerable versions or overwrite config.",
    "robots.txt": "Can expose intentionally hidden paths from crawlers, often misused by attackers.",
    "screenshot": "May contain visual records of internal systems or configurations.",
    "secret": "Exposing directories labeled 'secret' often implies sensitive or dangerous content.",
    "secure": "Might give a false sense of safety — these must still be tested and protected.",
    "session": "Session endpoints are often targeted for hijacking or token reuse.",
    "settings": "May reveal system or user configuration options.",
    "settingsadmin": "Likely contains high-privilege configurations requiring strict protection.",
    "setup": "Setup pages may allow reinitializing the system, leading to full compromise.",
    "setup.php": "Like 'setup', allows setup or reconfiguration — highly sensitive.",
    "signin": "Another form of login endpoint — may be vulnerable to brute force or leaks.",
    "signin-admin": "Admin-specific signin pages must be audited for extra protections.",
    "signup": "User registration pages can be abused for spam or account enumeration.",
    "source": "Source code disclosure helps attackers reverse engineer the application.",
    "src": "Commonly used directory for source files — can expose full backend logic.",
    "staff": "Staff or support portals should be restricted and audited for access.",
    "staging": "Staging environments often lack proper security and expose vulnerabilities.",
    "status": "May reveal service or system uptime, versions, or other internal info.",
    "superadmin": "Highly privileged account panel — often has full access without restrictions.",
    "support": "Support pages may leak internal processes or ticket systems.",
    "swagger": "API documentation tools may expose all internal API routes.",
    "temp": "Temporary folders may contain test data, logs, or old versions.",
    "test": "Test or staging environments often lack proper security and expose vulnerabilities.",
    "tests": "See 'test'.",
    "token": "Tokens exposed in URLs can be intercepted or reused by attackers.",
    "tmp": "Same as 'temp', often overlooked and left exposed.",
    "trace": "Trace endpoints may reveal internal routing or request data.",
    "traceroute": "May be used for internal diagnostics and leak infrastructure details.",
    "upload": "Upload directories may allow attackers to store or execute malicious files.",
    "uploads": "See 'upload'.",
    "user": "User profiles or control panels may expose personal or sensitive data.",
    "useradmin": "Likely a panel for user management — must be access-controlled.",
    "users": "User directories can leak account names or allow enumeration.",
    "vendor": "Often contains third-party libraries — may be exploitable if outdated.",
    "web.config": "Microsoft IIS config files can expose internal rules and paths.",
    "webadmin": "Generic admin interface — must be authenticated and IP-restricted.",
    "webconfig": "Custom web configuration files often contain secrets or app logic.",
    "wp-admin": "Common WordPress admin path — widely targeted by bots and attackers.",
    "wp-content": "WordPress content folder — exposing it can leak themes or sensitive data.",
    "wp-includes": "Core WordPress includes — often abused for file inclusion attacks.",
    "wp-login": "WordPress login page often lacks brute-force protections by default.",
}


async def check_urls_for_common_paths(urls: list[str]) -> Optional[dict]:
    """Return a single dictionary with URL and reason if it matches a sensitive path."""
    if not isinstance(urls, list):
        logger.error("Expected a list of URLs.")
        return None

    for url in urls:
        if not isinstance(url, str) or not url.strip():
            logger.error(f"Invalid or missing URL: {url}")
            continue

        try:
            parsed = urlparse(url)
            path = parsed.path.lower().strip("/")
        except Exception as e:
            logger.error(f"Failed to parse URL: {url} — {e}")
            continue

        for common_path in COMMON_PATHS:
            common_path_stripped = common_path.strip("/")
            if path.startswith(common_path_stripped):
                reason_key = common_path_stripped.split("/")[0]  # extract base keyword
                reason = VULN_REASONS.get(reason_key, "No specific reason provided.")
                logger.warning(f"Sensitive path found: {common_path} in {url} — {reason}")
                return {
                    "url": url,
                    "path": common_path,
                    "description": reason
                }

    logger.info(f"No known sensitive paths detected in provided URLs")
    return None

