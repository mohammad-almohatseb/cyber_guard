from fastapi import HTTPException
from app.api.models.information import WebInfoGatheringModel, NetworkInfoGathering

async def get_web_data(domain: str):
    web_data = await WebInfoGatheringModel.find_one(WebInfoGatheringModel.target == domain)
    return web_data

async def get_network_data(ip_address: str):
    network_data = await NetworkInfoGathering.find_one(NetworkInfoGathering.target == ip_address)
    return network_data


##web 

async def web_vulnerability_assesment(domain: str):
    web_data = await get_web_data(domain)
    
    if web_data is None:
        raise HTTPException(status_code=404, detail="Web data not found")
    
    # Extract subdomains
    subdomains = web_data.subdomains or []
    
    
    # Extract technology information
    tech_infos = web_data.technology_info or []

    all_tech_data = []

    for tech in tech_infos:
        all_tech_data.append({
        "subdomain": tech.get("subdomain"),
        "tech_stack": tech.get("tech_stack", []),
        "service_version": tech.get("service_version", []),
        "email_systems": tech.get("email_systems", []),
        "third_party": tech.get("third_party", [])
        })


    # Extract WAF information
    
    waf_detections = web_data.waf_detections or []

    all_waf_data = []

    for item in waf_detections:
        all_waf_data.append({
        "subdomain": item.get("subdomain"),
        "has_waf": item.get("has_waf"),
        "status_code": item.get("status_code"),
        "headers": item.get("headers", {})
        })

    #   Exteact archive urls
    archive_urls = web_data.archive_urls or []
    
    all_archive_urls = [] 
    for item in archive_urls:
        all_archive_urls.append({
            "login_portals": item.get("login_portals" , []),
            "senstive_js_files": item.get("senstive_js_files" , []),
            "injectable_urls": item.get("injectable_urls" , []),
            "redirect_urls": item.get("redirect_urls" , [])
        })
        
    # Extract https headers 
        
    https_headers = web_data.https_headers or []
    all_https_headers = []
    for item in https_headers:
        all_https_headers.append({
            "subdomain": item.get("subdomain",[]),
            "status_code": item.get("status_code",[]),
            "security_headers": item.get("security_headers",{}),
            "observed_headers": item.get("observed_headers",{}),
            "date_checked": item.get("date_checked",[])
        })
    
    # Extract directories
    directories = web_data.directories or []
    
    all_directories = []
    for item in directories:
        all_directories.append({
            "subdomain": item.get("subdomain"),
            "directory": item.get("directory",[])
        })
    
    
    
    # Extract certificate details
    certificate_details = web_data.certificate_details or []
    
    all_certificate_details = []
    for item in certificate_details:
        all_certificate_details.append({
            "subdomains": item.get("subdomains"),
            "has_tls": item.get("has_tls"),
            "start_date": item.get("start_date"),
            "expire_date": item.get("expire_date"),
            "issuer": item.get("issuer")
        })
    
    # Extract open ports
    open_ports = web_data.open_ports or []
    
    all_open_ports = []
    for item in open_ports:
        all_open_ports.append({
            "port": item.get("port"),
            "service": item.get("service")
        })
    # Extract server information
    server_info = web_data.server_info or []
    
    all_server_info = []
    for item in server_info:
        all_server_info.append({
            "subdomain": item.get("subdomain"),
            "server": item.get("server"),
            "os": item.get("os"),
            "cve_url": item.get("cve_url")
            
        })
    
    
    
    



##network

async def network_vulnerability_assesment(ip_address: str):
    network_data = await get_network_data(ip_address)
    
    if network_data is None:
        raise HTTPException(status_code=404, detail="Network data not found")

    target = network_data.target
    
    #  Extract alive hosts
    alive_hosts = network_data.alive_hosts or []
    
    all_alive_hosts = []
    for item in alive_hosts:
        all_alive_hosts.append({
            "host": item.get("host")
        })
    
    # Extract firewall information
    firewall_info = network_data.firewall_info or []
    
    all_firewall_info = []
    for item in firewall_info:
        all_firewall_info.append({
            "host": item.get("host"),
            "firewall_detected": item.get("firewall_detected"),
            "error": item.get("error")
            })
    
    # Extract detected services
    detected_services = network_data.detected_services or []
    
    all_detected_services = []
    for item in detected_services:
        all_detected_services.append({
            "host": item.get("host"),
            "services": item.get("services",[])
        })
    
    # Extract OS detection
    os_detection = network_data.os_detection or []
    
    all_os_detection = []
    for item in os_detection:
        all_os_detection.append({
            "host": item.get("host"),
            "os_info": item.get("os_info"),
            "urls": item.get("urls",[])
        })
    
    
    