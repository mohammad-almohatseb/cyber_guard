from typing import Any
from fastapi import HTTPException, logger
from app.api.models.information import WebInfoGatheringModel, NetworkInfoGathering
from app.api.models.vuln_assessment import WebVulnerabilityAssessmentModel, NetworkVulnerabilityAssessmentModel

from fastapi import HTTPException
from app.api.models.information import WebInfoGatheringModel, NetworkInfoGathering
from app.api.vulnerability_assesment.web.cve_analysis import  search_cves_server
from app.api.vulnerability_assesment.web.cve_analysis import search_cves_server_waf
from app.api.vulnerability_assesment.web.cve_analysis import search_cves_open_ports
from app.api.vulnerability_assesment.web.cert_checker import assess_tls_certificate

class VulnerabilityAssessment:
    def __init__(self):
        pass

    async def get_web_data(self, domain: str):
        web_data = await WebInfoGatheringModel.find_one(WebInfoGatheringModel.target == domain)
        return web_data

    
    async def get_network_data(self, ip_address: str):
        network_data = await NetworkInfoGathering.find_one(NetworkInfoGathering.target == ip_address)
        return network_data



# web_vulnerability_assesment

    async def web_vulnerability_assesment(self, domain: str):
        web_data : WebInfoGatheringModel = await self.get_web_data(domain)
        logger.logger.debug(f"web_data:  {web_data}")

        if web_data is None:
            raise HTTPException(status_code=404, detail="Web data not found")
        


        # get subdomain

        subdomains = web_data.subdomains or []




        # service cve function

        service_data = web_data.open_ports or []
        service_cve_data = []
        for item in service_data:
            service_cve_data.append(await search_cves_open_ports(item.get("service" , []),item.get("subdomain")) )

        
       
        # waf cve function

        waf_data = web_data.waf_detections or []
        waf_cve_data = []
        for item in waf_data:
            waf_cve_data.append(await search_cves_server_waf(item.get("waf_name" , []),item.get("subdomain")))




        # server cve function

        server_data = web_data.server_info or []
        server_cve_data = []
        for item in server_data:
            server_cve_data.append (await search_cves_server(item.get("server", []),item.get("subdomain")))




        # store in db   
        
        web_vuln_asessment = WebVulnerabilityAssessmentModel(
            server_cve = server_cve_data,
            waf_cve = waf_cve_data,
            service_cve = service_cve_data,
            certificate_details = certificate_data,
            name=domain
        ) 
        
        await web_vuln_asessment.save()


        # tech_infos = web_data.technology_info or []
        # cve_data = []
        # for tech in tech_infos:
            
        #     cve_data.append (await search_cves_async(tech.get("service_version", [])))




        # waf_detections = web_data.waf_detections or []
        # all_waf_data = []
        # for item in waf_detections:
        #     all_waf_data.append({
        #         "subdomain": item.get("subdomain"),
        #         "has_waf": item.get("has_waf"),
        #         "waf_name": item.get("waf_name"),
        #         "status_code": item.get("status_code"),
        #         "headers": item.get("headers", {})
        #     })




        # archive_urls = web_data.archive_urls or []
        # all_archive_urls = []
        # for item in archive_urls:
        #     all_archive_urls.append({
        #         "login_portals": item.get("login_portals", []),
        #         "senstive_js_files": item.get("senstive_js_files", []),
        #         "injectable_urls": item.get("injectable_urls", []),
        #         "redirect_urls": item.get("redirect_urls", [])
        #     })




        # https_headers = web_data.https_headers or []
        # all_https_headers = []
        # for item in https_headers:
        #     all_https_headers.append({
        #         "subdomain": item.get("subdomain", []),
        #         "status_code": item.get("status_code", []),
        #         "security_headers": item.get("security_headers", {}),
        #         "observed_headers": item.get("observed_headers", {}),
        #         "date_checked": item.get("date_checked", [])
        #     })




        # directories = web_data.directories or []
        # all_directories = []
        # for item in directories:
        #     all_directories.append({
        #         "subdomain": item.get("subdomain"),
        #         "directory": item.get("directory", [])
        #     })




        # certificate_details = web_data.certificate_details or []
        # all_certificate_details = []
        # for item in certificate_details:
        #     all_certificate_details.append({
        #         "subdomain": item.get("subdomain"),
        #         "has_tls": item.get("has_tls"),
        #         "start_date": item.get("start_date"),
        #         "expire_date": item.get("expire_date"),
        #         "issuer": item.get("issuer")
        #     })
        
        


#-----------------------------------------------------------------------------------------------------------------------------

# network_vulnerability_assesment   


    # async def network_vulnerability_assesment(self, ip_address: str):
    #     network_data = await VulnerabilityAssessment.get_network_data(ip_address)

    #     if network_data is None:
    #         raise HTTPException(status_code=404, detail="Network data not found")

    #     target = network_data.target

    #     alive_hosts = network_data.alive_hosts or []
    #     all_alive_hosts = []
    #     for item in alive_hosts:
    #         all_alive_hosts.append({
    #             "host": item.get("host")
    #         })

    #     firewall_info = network_data.firewall_info or []
    #     all_firewall_info = []
    #     for item in firewall_info:
    #         all_firewall_info.append({
    #             "host": item.get("host"),
    #             "firewall_detected": item.get("firewall_detected"),
    #             "error": item.get("error")
    #         })

    #     detected_services = network_data.detected_services or []
    #     all_detected_services = []
    #     for item in detected_services:
    #         all_detected_services.append({
    #             "host": item.get("host"),
    #             "services": item.get("services", [])
    #         })

    #     os_detection = network_data.os_detection or []
    #     all_os_detection = []
    #     for item in os_detection:
    #         all_os_detection.append({
    #             "host": item.get("host"),
    #             "os_info": item.get("os_info"),
    #             "urls": item.get("urls", [])
    #         })

        
        
        