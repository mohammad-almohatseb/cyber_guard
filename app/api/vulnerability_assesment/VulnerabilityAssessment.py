from typing import Any
from fastapi import HTTPException, logger
from app.api.models.information import WebInfoGatheringModel, NetworkInfoGathering
from app.api.models.vuln_assessment import WebVulnerabilityAssessmentModel, NetworkVulnerabilityAssessmentModel

from fastapi import HTTPException
from app.api.models.information import WebInfoGatheringModel, NetworkInfoGathering

from app.api.vulnerability_assesment.web.cve_analysis import  search_cves_server
from app.api.vulnerability_assesment.web.cve_analysis import search_cves_server_waf
from app.api.vulnerability_assesment.web.cve_analysis import search_cves_open_ports
from app.api.vulnerability_assesment.web.directory_analysis import check_urls_for_common_paths
from app.api.vulnerability_assesment.web.http_headers_analysis import assess_http_headers
from app.api.vulnerability_assesment.web.cert_checker import check_certificate
from app.api.vulnerability_assesment.web.input_validation import scan_input_validation



#from app.api.vulnerability_assesment.network.cve_analysis import search_cves_waf
from app.api.vulnerability_assesment.network.cve_analysis import search_cves_service
from app.api.vulnerability_assesment.network.cve_analysis import search_cves_os

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VulnerabilityAssessment:
    def __init__(self):
        pass

    async def get_web_data(self, domain: str):
        web_data = await WebInfoGatheringModel.find_one(WebInfoGatheringModel.target == domain)
        return web_data

    
    



# web_vulnerability_assesment

    async def web_vulnerability_assesment(self, domain: str):
        web_data : WebInfoGatheringModel = await self.get_web_data(domain)
        logger.debug(f"web_data:  {web_data}")

        if web_data is None:
            raise HTTPException(status_code=404, detail="Web data not found")
        


        # get subdomain

        subdomains = web_data.subdomains or []




        # service cve function

        service_data = web_data.open_ports or []
        service_cve_data = []
        for item in service_data:
            service_cve_data.append(await search_cves_open_ports(item.get("service" , []),item.get("domain")) )

        
       
        # waf cve function

        waf_data = web_data.waf_detections or []
        waf_cve_data = []
        for item in waf_data:
            waf_cve_data.append(await search_cves_server_waf(item.get("waf_name" , []),item.get("subdomain"),item.get("has_waf")))




        # server cve function

        server_data = web_data.server_info or []
        server_cve_data = []
        for item in server_data:
            server_cve_data.append (await search_cves_server(item.get("server", []),item.get("subdomain")))




        # dirictory analysis

        directories = web_data.directories or []
        dirictory_analysis_data = []
        for item in directories:
            dirictory_analysis_data.append(await check_urls_for_common_paths([item]))


        # https_headers_ analysis
        https_headers = web_data.https_headers or []
        https_headers_data = []
        for item in https_headers:
            https_headers_data.append(await assess_http_headers(item.get("security_headers"),item.get("observed_headers"),item.get("subdomain")))



        # certificate
        
        certificate_details = web_data.certificate_details or []
        certificate_checked = []
        for item in certificate_details:
            certificate_result = await check_certificate(
                item.get("subdomain"),
                item.get("has_tls"),
                item.get("start_date"),
                item.get("expire_date"),
                item.get("issuer"),
            )
            
            certificate_checked.append(certificate_result)




        #input validation analysis
            
        input_validation_results = [await scan_input_validation(item) for item in subdomains]
        logger.debug(f"input_validation_results: {input_validation_results}")
            




        # store in db   
        
        web_vuln_asessment = WebVulnerabilityAssessmentModel(
            target=domain,
            server_cve_data=server_cve_data,
            service_cve_data=service_cve_data,
            waf_cve_data=waf_cve_data,
            dirictory_analysis_data=dirictory_analysis_data,
            https_headers_data=https_headers_data,
            certificate_data=certificate_checked,
            input_validation_data=input_validation_results

        ) 
        
        await web_vuln_asessment.save()




        
        


#-----------------------------------------------------------------------------------------------------------------------------

# network_vulnerability_assesment   

    async def get_network_data(ip_address: str):
        network_data = await NetworkInfoGathering.find_one(NetworkInfoGathering.target == ip_address)
        return network_data


    async def network_vulnerability_assesment(self, ip_address: str):
        network_data = await VulnerabilityAssessment.get_network_data(ip_address)

        if network_data is None:
            raise HTTPException(status_code=404, detail="Network data not found")

        target = network_data.target

        alive_hosts = network_data.alive_hosts or []



        
        # firwall cve detection

        # firewall_info = network_data.firewall_info or []
        # waf_cve_data = []
        # for item in firewall_info:
        #     waf_cve_data.append(await search_cves_waf(item.get("firewall_detected" , []),item.get("host")))

    #     firewall_info = network_data.firewall_info or []
    #     for item in firewall_info:
    #         all_firewall_info.append({
    #             "host": item.get("host"),
    #             "firewall_detected": item.get("firewall_detected"),
    #             "error": item.get("error")
    #         })




        # service cve detection 

        detected_services = network_data.detected_services or []
        detected_services_data = []

        for item in detected_services:
            host = item.get("host")
            services = item.get("services", [])
            for service_entry in services:
                detected_services_data.append(
                await search_cves_service(service_entry.get("service"), host)

        )


        # os cve detection
       
        os_detection = network_data.os_detection or []
        os_detection_data = []

        for item in os_detection:
            os_info = item.get("os_info", "").lower() 
            if "unknown" in os_info or "time out" in os_info:
                continue  

            result = await search_cves_os(os_info, item.get("host"))
            if result:  
               os_detection_data.append(result)   
   



     # store in db   
        
        network_vuln_asessment = NetworkVulnerabilityAssessmentModel(
            target=target,
            os_detection_data = os_detection_data,
            # waf_cve_data = waf_cve_data,
            detected_services_data = detected_services_data
        ) 
        await network_vuln_asessment.save()